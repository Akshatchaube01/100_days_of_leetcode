Problem Statement:
https://leetcode.com/problems/sort-array-by-increasing-frequency

Problem Solution:
class Solution {
private:
    static bool cmp(const pair<int, int> &a, const pair<int, int> &b) {
    return (a.first == b.first ? a.second > b.second : a.first < b.first);
}
public:
    vector<int> frequencySort(vector<int>& nums) {
        map<int,int>mapp;
        for(int i=0;i<nums.size();i++){
            mapp[nums[i]]++;
        }
        vector<pair<int,int>>vec_p;
        for(auto i:mapp){
            vec_p.push_back(make_pair(i.second,i.first));
        }
        sort(vec_p.begin(),vec_p.end(),cmp);
        
        vector<int>final_vec;
        
        for(int i=0;i<vec_p.size();i++){
            int num=vec_p[i].first;
            while(num--){
                final_vec.push_back(vec_p[i].second);
            }
            
        }
        return final_vec;
    }
};
